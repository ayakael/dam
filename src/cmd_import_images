#!/bin/bash

# doc cmd_import_images {
#
# DESCRIPTION
#   cmd_import_images - Imports CD images into GIT_DIR
#
# USAGE
#   cmd_import_images </path/to/git/dir> </path/to/source/dir> -b [<batch-id>] </path/to/image/folder> [<...>]
#
# DEPENDENCIES src/import_images
#
# }

cmd_import_images() {
    local GIT_DIR="${1}"
    local SOURCE="${2}"; shift 2
    case ${1} in
        (-b) local BATCHID=${2}; shift 2 ;;
    esac
    local dirList=("${@}")
    

    for dir in ${dirList[@]}; do
        cueList=($(find "${dir}" -name '*.cue' -printf '%p\n'))

        # Consolidating all detected images
        for cue in ${cueList[@]}; do
            _msg EXEC "Consolidating ${cue}"
            for var in IMG CUE ACCURIP LOG COVER; do unset ${var}; done
            for ext in flac cue accurip log jpg; do
                local file=$(sed "s|cue|${ext}|" <<< ${cue})
                [[ ! -f "${file}" ]] && continue
                case ${ext} in
                    flac) 
                        local IMG="${file}"
                    ;;
            
                    cue)
                        local CUE="${file}"
                    ;;
    
                    (accurip) local ACCURIP="${file}" ;;
                    (log) local LOG="${file}" ;;
                    (jpg) local COVER="${file}" ;;
                esac
            done
            import_images "${GIT_DIR}" "${SOURCE}" "${IMG}" "${CUE}" $([[ -n "${ACCURIP}" ]] && echo "-a") "${ACCURIP}" $([[ -n "${LOG}" ]] && echo "-l") "${LOG}" $([[ -n "${COVER}" ]] && echo "-c") "${COVER}"  >${STDERR} 2>&1
            local EXIT=$?
            [[ ${EXIT} -eq 0 ]] && _msg OK || _msg WARN "Import_images exited with code ${EXIT}"
        done

        
        # Import folders
        local importList=($(find ${GIT_DIR}/.import/${SOURCE}/ -mindepth 1 -maxdepth 1 -type d -printf '%p\t'))
        for import in ${importList[@]}; do
            _msg EXEC "Importing ${import}"
            import_src "${GIT_DIR}" "${import}" $([[ -n "${BATCHID}" ]] && echo "-b") ${BATCHID} >${STDERR} 2>&1 
            local EXIT=$?
            [[ ${EXIT} -eq 0 ]] && _msg OK || _msg WARN "import_src exited with code ${EXIT}"
            rm -Rf "${import}" >/dev/null 2>&1
        done
    done
    rm -Rf "${GIT_DIR}/.import" >/dev/null 2>&1
}
