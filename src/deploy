#!/bin/bash

# doc deploy {
# 
# DESCRIPTION
#   deploy - Deploys IMAGEID to TARGET and then updates DB file.
# 
# USAGE
#   deploy </path/to/git/dir> </path/to/target> <path/to/db/file> <imageid>
#


deploy() {
    local GIT_DIR="${1}"
    local TARGET="${2}"
    local DB_FILE="${TARGET}/${3}"
    local IMAGEID="${4}"

    
    
    ## targetmetaList, targetpathList, deployedpathList, deployedmetaList generators
    # targetmetaList and targetpathList are used to define both the metadata, and path 
    # of split files. deployedpathList and deployedmetaList are used later to determine
    # if a change occured in the targetpath and targetmeta, if the IMAGEID has already been
    # deployed.
    
    # Defines the TARGET and DEPLOYED total tracks.
    local TOTALTRACKS="$(grep -e TITLE "${GITDIR}/${IMAGEID}.tags" | wc -l)"
    local TARGET_TOTALTRACKS="$(grep -e TITLE "${GITDIR}/${IMAGEID}.tags"  | wc -l)"
    local DEPLOYED_TOTALTRACKS="$(grep -e ${IMAGEID} "${DB_FILE}" | wc -l)"
    # Current working track variable
    local COUNT=1
    while [[ ${COUNT} -le ${TARGET_TOTALTRACKS} ]]; do
        local targetmetaList[${COUNT}]="$(print_target_meta ${IMAGEID}.tags ${COUNT})"
        local targetpathList[${COUNT}]="${TARGET}/$(print_target_path ${targetmetaList[${COUNT}]})"
        local deployedpathList[${COUNT}]="${TARGET}/$(print_deployed_path ${IMAGEID} ${COUNT} ${DB_FILE})"
        local deployedmetaList[${COUNT}]="$(print_deployed_meta ${deployedpathList[${COUNT}]})"
        # Bumps up working track number
        local COUNT=$(( ${COUNT} + 1 ))
    done

    # Checks is there's a discrepancy between what has been deployed and what is targetted to be deployed.
    # This can be caused by an unclean deployment, or a change in the cue files. In this case, the clean_target
    # function will be used to clean the target of the unclean imageid, and then normal deployment will occur.
    if [[ ${TARGET_TOTALTRACKS} -ne ${DEPLOYED_TOTALTRACKS} ]] && [[ ${DEPLOYED_TOTALTRACKS} -ne 0 ]]; then
        clean_target ${TARGET} ${IMAGEID} ${DB_FILE}
    fi
    
    if [[ -z "${deployedpathList[@]}" ]]; then   
        ## FLAC Splitter
        # Splits the provided IMAGEID's FLAC file into multiple tracks using the provided CUE file.
        # A hack is sort of applies here by populating the deployedpathList with the output files of split_flac.
        split_flac "${GITDIR}" "${IMAGEID}"
        local COUNT=1
        while ${COUNT} -le ${TARGET_TOTALTRACKS}; do
            local deployedpathList[${COUNT}]="${GITDIR}/$(printf 'split-track%02d.flac' ${COUNT})"
            local deployedmetaList[${COUNT}]=""
            local COUNT=$(( ${COUNT} + 1 ))
        done
    fi
    
    ## Metadata application 
    # Applies metadata to flac files that are either newly generated by split_flac to already deployed files that require it.
    local COUNT=1
    while [[ ${COUNT} -le ${TARGET_TOTALTRACKS} ]]; do
        # If ${targetmetaList[${COUNT}]} in ${deployedmetaList[${COUNT}]} are not equal, it means that either the already deployed
        # flac file needs metadata updating, or a newly generated split flac needs metadata application
        if [[ "${targetmetaList[${COUNT}]}" != "${deployedmetaList[${COUNT}]}" ]]; then
            [[ ! -z "${deployedmetaList[${COUNT}]}" ]] && metaflac --remove-all ${deployedpathList[${COUNT}]}
            awk 'BEGIN {RS=";"}{print $0}' <<< ${targetmetaList[${COUNT}]} | head -n -1 | metaflac --import-tags-from=- --import-picture-from="${IMAGEID}.jpg" ${deployedpathList[${COUNT}]}
        fi
        local COUNT=$(( ${COUNT} + 1 ))
    done

    ## Track deployment
    # Deploys files to appropriate targetpath, of course only if necessary.
    local COUNT=1 
    while [[ ${COUNT} -le ${TARGET_TOTALTRACKS} ]]; do
        if [[ "${targetpathList[${COUNT}]}" != "${deployedpathList[${COUNT}]}" ]]; then
            mkdir -p "$(dirname "${targetpathList[${COUNT}]}")"
            mv "${deployedpathList[${COUNT}]}" "${targetpathList[${COUNT}]}"
            local ROW_NO=$(_cfg query '$2=='${IMAGEID}' && $3=='${COUNT}'' ${DB_FILE})
            _cfg drop row ${ROW_NO} ${DB_FILE}
            _cfg insert row "true" ${IMAGEID} ${COUNT} "${targetpathList[${COUNT}]}" ${DB_FILE}
        fi
        local COUNT=$(( ${COUNT} + 1 ))
    done
}
