#!/bin/bash

# doc import_images {
#
# DESCRIPTION
#   import_images - Imports files output from cueripper. Expects cueripper to output using
#   the following format:  %artist% - %album%\if(%unique%,%unique%,0), so that every album
#   is outputted in its own folder, first disc image is labeled 0.<ext>, and second disc image
#   is labeled 1.<ext>, and the cover is named folder.jpg
#
# USAGE
#   import_images </path/to/import/dir> </path/to/img> </path/to/cue> [<options>]
#
# OPTIONS
#   -a </path/to/accurip/log
#   -l </path/to/eac/log
#   -c </path/to/cover/img
#
# DEPENDENCIES src/print_meta_mtag src/add_bom src/fix_apos src/gen_cover src/file_name src/cueparser
#
# }


import_images() {
    local GIT_DIR="${1}"
    local SOURCE="${2}"
    local IMG="${3}"; local pathList[1]="${IMG}"
    local CUE="${4}"; local pathList[2]="${CUE}"; shift 4
    while true; do
        case ${1} in
            (-a) local ACCURIP="${2}"; local pathList[3]="${ACCURIP}"; shift 2;;
            (-c) local COVER="${2}"; local pathList[4]="${COVER}"; shift 2;;
            (-l) local LOG="${2}"; local pathList[5]="${LOG}"; shift 2;;
            (*) break ;;
        esac
    done
  
    # Checks if path is valid
    echo "Checking if all paths exists" 
    for path in ${pathList[@]}; do
        [[ ! -f "${path}" ]] && { echo "${path} - No such file or directory"; return 1; }
    done

    echo "Checking existence of LOG file"
    if [[ -z "${LOG}" ]] && [[ "${SOURCE}" == "CUETOOLS" ]]; then echo "CUETOOLS requires a LOG file, please make sure it is generated"; return 2; fi
    if [[ -z "${LOG}" ]] && [[ "${SOURCE}" == "EAC" ]]; then echo "EAC requires a LOG file, please make sure it is generated"; return 2; fi

    echo "Checking existence of ACCURIP file"
    # Checks if ACCURIP should exist or not
    if [[ -n "${ACCURIP}" ]] && [[ "${SOURCE}" == "EAC" ]]; then echo "Accurip file specified, ignored"; unset ${ACCURIP}; fi 
    if [[ -z "${ACCURIP}" ]] && [[ "${SOURCE}" == "CUETOOLS" ]]; then echo "CUETOOLS requires an ACCURIP file, please make sure it is generated"; return 2; fi

    # Parses cue file for DISCID
    echo "Parsing cue file to determine DISCID"
    local METADATA=$(print_meta_cue "${CUE}" | tr '\n' ';')
    local discidList=($(awk 'BEGIN{FS="=";RS=";"}{if($1=="DISCID"){print $2}}' <<<${METADATA} | awk '!seen[$0]++'))

    [[ ${#discidList[@]} -ne 1 ]] && { echo "There should be only one DISCID specified in cue file"; return 3; }

    # Copies path to import folder
    echo "Cleaning up .import dir"
    rm -Rf "${GIT_DIR}/.import/${SOURCE}/${discidList}" >/dev/null 2>&1
    echo "Creating ${GIT_DIR}/.import/${SOURCE}/${discidList}"
    mkdir -p "${GIT_DIR}/.import/${SOURCE}/${discidList}"
    for path in ${pathList[@]}; do
        case $(sed 's|.*\.||' <<< ${path}) in
            (jpg) echo "Copying cover image"; convert "${path}" "${GIT_DIR}/.import/${SOURCE}/${discidList}/img.png" ;;
            (cue|accurip|log|flac) local DEST="${GIT_DIR}/.import/${SOURCE}/${discidList}/img.$(sed 's|.*\.||' <<< ${path})"; echo "Copying ${path} to ${DEST}"; cp --no-preserve=mode "${path}"  "${DEST}" ;;
        esac    
    done
}

